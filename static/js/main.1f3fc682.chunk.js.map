{"version":3,"sources":["contexts/PromotionsContext.js","hooks/useLocalStorage.js","components/Loader/index.js","App.js","serviceWorker.js","index.js"],"names":["PromotionsContext","React","createContext","usePromotions","useContext","PromotionsProvider","children","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","console","log","undefined","JSON","parse","value","setValue","useEffect","setItem","stringify","useLocalStorage","promotions","setPromotions","Provider","addPromotion","data","memo","id","className","Landing","lazy","CreatePromotion","PromotionsList","PromotionDetail","StudentDetail","App","fallback","exact","path","process","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+NAGA,IAAMA,EAAoBC,IAAMC,gBAEzB,SAASC,IACZ,OAAOC,qBAAWJ,GAGf,SAASK,EAAT,GAA2C,IAAbC,EAAY,EAAZA,SAAY,ECLlC,SAAyBC,EAAKC,GACzC,IAAMC,EAHK,eAGkBF,EAD0B,EAE7BG,oBAAS,WAC/B,IAAMC,EAAYC,aAAaC,QAAQJ,GAEvC,OADAK,QAAQC,IAAI,cAAeJ,GACV,MAAbA,QAAmCK,IAAdL,EAAgCM,KAAKC,MAAMP,GACxC,oBAAjBH,EACAA,IAEAA,KATwC,mBAEhDW,EAFgD,KAEzCC,EAFyC,KAkBvD,OAJAC,qBAAU,WACNT,aAAaU,QAAQb,EAAaQ,KAAKM,UAAUJ,MAClD,CAACA,EAAOV,IAEJ,CAACU,EAAOC,GDZmBI,CAAgB,aAAc,IADnB,mBACxCC,EADwC,KAC5BC,EAD4B,KAS/C,OACE,kBAAC1B,EAAkB2B,SAAnB,CAA4BR,MAAO,CAAEM,aAAYG,aAP9B,SAACC,GAClBf,QAAQC,IAAI,iBAAkBc,GAChCH,EAAc,GAAD,mBAAKD,GAAL,CAAiBI,KAC9Bf,QAAQC,IAAI,sBAAZ,sBAAuCU,GAAvC,CAAmDI,QAKhDvB,K,kNEfQwB,G,MAAAA,gBAAK,WACnB,OACC,yBAAKC,GAAG,kBACP,yBAAKA,GAAG,WACR,yBAAKC,UAAU,gCACf,yBAAKA,UAAU,sC,QCLZC,EAAUC,gBAAK,kBAAM,uDACrBC,EAAkBD,gBAAK,kBAC3B,wDAEIE,EAAiBF,gBAAK,kBAC1B,uDAEIG,EAAkBH,gBAAK,kBAC3B,uDAEII,EAAgBJ,gBAAK,kBACzB,uDAsBaK,MAnBf,WACE,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMC,0BAA+CC,UAAWT,IAC7E,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAMC,qBAAyCC,UAAWR,IACvE,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAMC,yBAA6CC,UAAWP,IAC3E,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAMC,uBAA2CC,UAAWN,IACzE,kBAAC,IAAD,CAAOI,KAAMC,UAA8BC,UAAWX,SCjB9CY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGHC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.1f3fc682.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport useLocalStorage from '../hooks/useLocalStorage.js';\r\n\r\nconst PromotionsContext = React.createContext();\r\n\r\nexport function usePromotions() {\r\n    return useContext(PromotionsContext);\r\n}\r\n\r\nexport function PromotionsProvider({ children }) {\r\n  const [promotions, setPromotions] = useLocalStorage(\"promotions\", []);\r\n\r\n  const addPromotion = (data) => {\r\n      console.log(\"New Promotion \", data);\r\n    setPromotions([...promotions, data]);\r\n    console.log(\"Updated promotions \", [...promotions, data]);\r\n  };\r\n\r\n  return (\r\n    <PromotionsContext.Provider value={{ promotions, addPromotion }}>\r\n      {children}\r\n    </PromotionsContext.Provider>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst PREFIX = \"mbula-argon-\";\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    const prefixedKey = PREFIX + key;\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey);\r\n        console.log(\"JSON Value \", jsonValue);\r\n        if (jsonValue != null && jsonValue !== undefined) return JSON.parse(jsonValue);\r\n        if (typeof initialValue === 'function') {\r\n            return initialValue();\r\n        } else {\r\n            return initialValue;\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n    }, [value, prefixedKey]);\r\n\r\n    return [value, setValue];\r\n}","import React, { memo } from \"react\";\r\nimport \"./loader.css\";\r\n// import { BoxLoading, TransverseLoading, BlockLoading } from 'react-loadingg';\r\n\r\n\r\nexport default memo(function Loader() {\r\n\treturn (\r\n\t\t<div id=\"loader-wrapper\">\r\n\t\t\t<div id=\"loader\"></div>\r\n\t\t\t<div className=\"loader-section section-left\"></div>\r\n\t\t\t<div className=\"loader-section section-right\"></div>\r\n\t\t</div>\r\n\t);\r\n});\r\n","import React, { lazy, Suspense } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Loader from \"./components/Loader\";\nimport { PromotionsProvider } from \"./contexts/PromotionsContext.js\";\n\nconst Landing = lazy(() => import(\"./components/Landing/Landing.js\"));\nconst CreatePromotion = lazy(() =>\n  import(\"./components/CreatePromotion/CreatePromotion.js\")\n);\nconst PromotionsList = lazy(() =>\n  import(\"./components/PromotionsList/PromotionsList.js\")\n);\nconst PromotionDetail = lazy(() =>\n  import(\"./components/PromotionDetail/PromotionDetail.js\")\n);\nconst StudentDetail = lazy(() => \n  import(\"./components/PromotionDetail/components/StudentDetail.js\")\n);\n\nfunction App() {\n  return (\n    <Suspense fallback={<Loader />}>\n      <PromotionsProvider>\n        <BrowserRouter>\n          <Switch>\n            <Route exact path={process.env.PUBLIC_URL +  \"/createpromotion/\"} component={CreatePromotion} />\n            <Route exact path={process.env.PUBLIC_URL + \"/promotions/\"} component={PromotionsList} />\n            <Route exact path={process.env.PUBLIC_URL + \"/promotion/:year\"} component={PromotionDetail} />\n            <Route exact path={process.env.PUBLIC_URL + \"/student/:year\"} component={StudentDetail} />\n            <Route path={process.env.PUBLIC_URL + \"/\"} component={Landing} />\n          </Switch>\n        </BrowserRouter>\n      </PromotionsProvider>\n    </Suspense>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./assets/vendor/nucleo/css/nucleo.css\";\nimport \"./assets/vendor/font-awesome/css/font-awesome.min.css\";\nimport \"./assets/scss/argon-design-system-react.scss?v1.1.0\";\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<HashRouter>\n    \t<App />\n  \t</HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}